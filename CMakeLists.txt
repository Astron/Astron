cmake_minimum_required (VERSION 2.6)
set_property ( GLOBAL PROPERTY USE_FOLDERS ON)
project (OOTP)

if (WIN32)
	add_definitions(-D_WIN32_WINDOWS)
endif()

### YAML Depedency -- required by config ###
set(YAMLCPP_INCLUDES "dependencies/yaml-cpp-0.5.1/include" CACHE PATH "Path to yamlcpp includes")
if(EXISTS "${PROJECT_SOURCE_DIR}/dependencies/yaml-cpp-0.5.1/lib")
	set(YAMLCPP_LIBRARIES "dependencies/yaml-cpp-0.5.1/lib" CACHE PATH "Path to yamlcpp libs")
else()
	set(YAMLCPP_LIBRARIES "dependencies/yaml-cpp-0.5.1" CACHE PATH "Path to yamlcpp libs")
endif()
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	set (YAMLCPP_LIBNAME "yaml-cpp" CACHE STRING "Name of YAML library")
	set (CMAKE_CXX_FLAGS "-pthread")
else ()
	set (YAMLCPP_LIBNAME "libyaml-cppmdd" CACHE STRING "Name of YAML library")
endif()
include_directories (${CMAKE_CURRENT_LIST_DIR}/${YAMLCPP_INCLUDES})
link_directories (${CMAKE_CURRENT_LIST_DIR}/${YAMLCPP_LIBRARIES})

### BOOST Dependency -- required by yaml-cpp, and networking ###
set(Boost_USE_STATIC_LIBS ON CACHE BOOL "Test")
find_package (Boost COMPONENTS system)
if (NOT Boost_FOUND)
	set(Boost_USE_STATIC_LIBS OFF CACHE BOOL "Test")
	find_package (Boost COMPONENTS system)
endif()
if (Boost_FOUND)
	include_directories(${Boost_INCLUDE_DIR})
	link_directories(${Boost_LIBRARY_DIRS})
	message("${Boost_LIBRARIES}")
else ()
	message (FATAL_ERROR "You need boost to build this, set the BOOST_ROOT or BOOSTROOT env variables, or pass them to cmake")
endif()
add_definitions(-DBOOST_ALL_NO_LIB -D_SCL_SECURE_NO_WARNINGS)

set (BUILD_TESTS CACHE BOOL "If set to true, test files will be compiled in")

if(BUILD_TESTS)
	set (TEST_FILES src/tests/participant_test.cpp)
endif()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
	execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
	message("${GCC_VERSION}")
	if(GCC_VERSION VERSION_GREATER 4.7 OR GCC_VERSION VERSION_EQUAL 4.7)
		add_definitions(-std=c++11) #for the fucking 'auto' keyword
	else()
		add_definitions(-std=c++0x) #for the fucking 'auto' keyword
	endif()
endif()

include_directories (src)
add_executable (openotpd
	src/core/main.cpp 
	src/core/config.cpp 
	src/core/logger.cpp 
	src/core/config.h 
	src/core/global.h
	src/core/global.cpp
	src/core/logger.h
	src/messagedirector/MessageDirector.cpp
	src/messagedirector/MessageDirector.h
	src/messagedirector/MDNetworkParticipant.cpp
	src/messagedirector/MDNetworkParticipant.h
	src/util/Datagram.h
	src/util/DatagramIterator.h
	${TEST_FILES}
)

source_group ("Header Files" FILES src/core/config.h src/core/global.h src/core/logger.h src/messagedirector/messagedirector.h)

add_library (dcparser 
	src/dcparser/p3dcparser_composite1.cxx 
	src/dcparser/p3dcparser_composite2.cxx 
	src/dcparser/dcLexer.cxx
	src/dcparser/dcParser.cxx
)

add_dependencies (openotpd dcparser)
target_link_libraries (openotpd dcparser ${YAMLCPP_LIBNAME} ${Boost_LIBRARIES})
