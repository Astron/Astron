# The Daemon section describes identification information which can be queried from the MD.
daemon:
    name: Core Message Director # To be used in page titles and intra-MD links.
    url: http://123.45.67.89/coremd/ # URL where the web interface may be located.
    #id: 3  #default: automatically assigned


# The General section contains config settings that are shared among daemons in the cluster.
general:
    # An "IP:port" for the Event Logger to be used when logging global events.
    eventlogger: 127.0.0.1:9090
    # A list of DC files to be loaded.
    #     NOTE: Order is sensitive, DC files loaded in a different order will not match.
    dc_files:
        - core.dc
        - game.dc
        - minigames.dc


# The Uberdog section describes the existence of UberDOGs, which are objects
#     that are assumed to exist statically.
uberdogs:
  - id: 1234
    class: LoginManager
    # Anonymous specifies whether an uberdog can be accessed through
    #     the ClientAgent from an unauthenticated client.
    anonymous: true # Default: false


# The Web section enables a status and debugging webpage on this daemon.
web:
    bind: 0.0.0.0:80 # The webserver should listen on port 80, binding to all interfaces.
    # Authentication enables a BASIC authentication mechanism for the website
    #authentication:
    #    username: foo
    #    password: bar


messagedirector:
    bind: 0.0.0.0:6660
    #connect: 127.0.0.1:5555


# The Roles section allows specifying roles that we would like this daemon to perform.
roles:
    # For example, let's have a client agent which listens on port 6667 on all interfaces:
    - type: clientagent
      bind: 0.0.0.0:6667
      # Manual_dc_hash tells the server what DC hash version to expect from the client.
      #     This is mostly used if the DC parser used by the client doesn't have hash parity
      #     with the parser used by Astron. (Panda3D users will currently need to enable this).
      #manual_dc_hash: 0xABCD1234
      version: "FooGame v7.0"

      # "haproxy" can be turned on to indicate that incoming connections will
      # be prefixed with HAProxy's PROXY protocol, and the client address
      # should be read from this instead.
      #
      # You should enable this if you are running your Astron CAs behind
      # HAProxy. In your HAProxy config, you must also add either the
      # "send-proxy-v2" (recommended) or the "send-proxy" option (not recommended).
      #haproxy: true

      # TLS is an optional section (though it should ALWAYS be used in production)
      # It enables SSL/TLS, allowing you to configure a number of TLS options.
      tls:
        # Required SSL configuration
        certificate: FooGame.crt # Required, a ".pem" format certificate file
        key_file: hidden/FooSecret.key # Required, key for your cert file
        # Optional SSL configuration
        chain_file: CertProvider.crt  # Specify a cert for your Intermediate CA
        tlsv1: true   # Enables TLSv1; enabled by default;
        sslv2: false  # Enables SSLv2; disabled by default.
        sslv3: false  # Enables SSLv3; disabled by default.
        # CertAuthority allows you to specify a certificate authority file, or a directory
        # of CA files to be used to verify peer certificates.  When specified, connections
        # must provide a valid client certificate or be disconnected.
        cert_authority: FooAuthority.pem
        max_verify_depth: 2 # Defaults to 6; ignored if cert_authority is not present
      client:
        # Type declares which client this client agent should generate when it receives a new
        # connection.  By default, it is a "libastron" client which accepts connections from a
        # client using the libastron ClientRepository library.
        type: fooclient
        # Relocate allows a client to send a ClientObjectLocation message to the server to
        # indicate it would like to change the location of an object owned by that client.
        # This is a feature specific to the Astron client, a custom client class
        # could define its own set of configuration values.
        relocate: true # Default: false
      # Channels defines the range of channels this clientagent can assign to Clients
      channels:
          min: 100100
          max: 100999

    # Next we'll have a state server, whose control channel is 402000.
    - type: stateserver
      control: 402000

    # Now a database, which listens on channel 402001, generates objects with ids >= 100,000,000+ and
    # uses BerkeleyDB as a backing store.
    - type: database
      control: 402001
      #broadcast: off # Controls whether object-updates are broadcast, default: on.
      generate:
      # Generate defines the range of DistributedObject ids that the database can create new objects with,
      # and is generally responsible for. Min and max are both optional fields.
          min: 100000000 # Required (no default)
          #max: 200000000 # Default: DOID_T_MAX (UINT_MAX)
      backend:
          type: bdb
          filename: main_database.db

    # We will then create a database state server which provides state-server-like
    #     behavior on database objects.  The dbss does not have a control channel,
    #     and so cannot generate new objects.
    - type: dbss
      database: 402001 # The channel of the associated database
      ranges:
      # Ranges defines a sequence of ranges of DistributedObject ids that the
      #     database-state server will provide stateserver-like behavior for.
      # Note: The ranges do not have to match that of the database. This allows for multiple dbss to
      #       split up the handling of a single database. Additionally, it can be used to exclude
      #       special-case or prepopulated objects from recieving SS behavior.
      # Warning: While this is currently allowed by the protocol, if the range of non-prepopulated
      #          object ids are incompletely-covered by DBSS or covered by multiple, erroneous
      #          behavior will occur.
      #          It is recommended to use seperate database roles for DBSS and non-DBSS objects.
        - min: 100000000
      #   max: 200000000

    # Let's also enable the Event Logger. The Event Logger does not listen on a channel; it uses a
    # separate UDP socket to listen for log events.
    - type: eventlogger
      bind: 0.0.0.0:9090 # REMEMBER: UDP
      output: /var/log/astron/eventlogger/el-%Y-%m-%d-%H-%M-%S.log # This is a time format.
      rotate_interval: 1d # Rotate the logs daily.
