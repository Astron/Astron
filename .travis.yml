language: cpp

matrix:
  fast_finish: true
  include:
  - os: linux
    compiler: clang
  - os: linux
    compiler: gcc
    env: BUILD_TYPE=coverage
      addons:
        apt:
          packages:
            - lcov
  - os: osx
    compiler: gcc
  - os: osx
    compiler: clang

dist: trusty
sudo: required

osx_image: xcode8.3

services:
    - mongodb
addons:
  apt:
    sources:
    - mongodb-3.0-trusty
    packages:
    - cmake
    - libboost-filesystem-dev
    - libboost-regex-dev
    - libboost-system-dev
    - libboost-thread-dev
    - libssl-dev
    - libyaml-cpp-dev
    - mongodb-org-server
    - lcov

before_install:
- |
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    brew update;
    brew outdated boost || brew upgrade boost;
    brew upgrade openssl && export OPENSSL_ROOT_DIR=/usr/local/Cellar/openssl/1.0.2n/
    brew install yaml-cpp;
    brew install mongodb;
  fi

  if [ "$BUILD_TYPE" = coverage ]; then
    gem install coveralls-lcov;
  fi

install:
- OLD_PWD=$PWD
- cd ~/build && wget https://github.com/mongodb/libbson/releases/download/1.9.3/libbson-1.9.3.tar.gz && tar xzf libbson-1.9.3.tar.gz && cd libbson-1.9.3 && ./configure && make && sudo make install
- cd ~/build && wget https://github.com/mongodb/mongo-c-driver/releases/download/1.9.3/mongo-c-driver-1.9.3.tar.gz && tar xzf mongo-c-driver-1.9.3.tar.gz && cd mongo-c-driver-1.9.3 && ./configure && make && sudo make install
- cd ~/build && git clone https://github.com/mongodb/mongo-cxx-driver && cd mongo-cxx-driver/build && git checkout releases/stable && cmake .. && make && make install && sudo cp -r install/* /usr/local
- cd $OLD_PWD

# Workaround for https://svn.boost.org/trac/boost/ticket/7473
before_script:
- 'if [[ "$CXX" == "clang++" && "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install wget && sudo wget -O /usr/include/boost/config/stdlib/libstdcpp3.hpp https://raw.githubusercontent.com/boostorg/config/b36566fe04a89103b7ef5569c03e3a26eb77af36/include/boost/config/stdlib/libstdcpp3.hpp; fi'

after_success:
  - if [ "$BUILD_TYPE" = coverage ]; then
      echo "Running coverage..."
      pwd
      rm -f coverage.info
      lcov -c -o coverage.info \
        -d CMakeFiles/astrond.dir/src/ \
        -d src/dclass/CMakeFiles/dclass.dir/

      lcov -r coverage.info -o coverage.info build/* \
        c++/* \
        boost/* \
        yaml-cpp/* \
        bsoncxx/* \
        mongocxx/* \
        src/dclass/CMakeFiles/dclass.dir/file/lexer.cpp \
        src/dclass/CMakeFiles/dclass.dir/file/parser.cpp

      lcov -l coverage.info
      coveralls-lcov coverage.info
    else
      echo "No coverage for this build";
    fi

script:
  - cd build
  - if [ "$BUILD_TYPE" = coverage ]; then cmake -DENABLE_COVERAGE=1 -DBUILD_TYPE=Debug ..; else cmake ..; fi
  - make
  - env CTEST_OUTPUT_ON_FAILURE=1 make test
